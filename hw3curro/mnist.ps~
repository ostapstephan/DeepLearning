%!PS-Adobe-3.0
%%Title: mnist.py
%%For: ostap
%%Creator: a2ps version 4.14
%%CreationDate: Wed Sep 26 22:01:47 2018
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#!/bin/python3.6) c n
(#Ostap Voynarovskiy) N
(#CGML HW3) N
(#Sept 26 2018) N
(#Professor Curro) N
() p n
(import) K
( numpy as np) p n
(import) K
( tensorflow as tf) p n
(import) K
( matplotlib.pyplot as plt) p n
(import) K
( logging) p n
(from) K
( tqdm ) p
(import) K
( tqdm) p n
(import) K
( os) p n
() N
(#os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3') c n
() p n
(# Define globals and import dataset) c n
(mnist = tf.keras.datasets.mnist ) p n
(\(x_train,y_train\),\(x_test,y_test\) = mnist.load_data\(\)) N
(x_train,x_test = x_train/255.0 ,x_test/255.0) S 48 T () S 56 T () S
(# go from 0-1 instead of) c n
( 0-255 8 bit greyscale ) N
(y_train = y_train.astype\(') p
(int32) str
('\)) p 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S
(# fix du) c n
(e to tensorflow complaining) N
(y_test = y_test.astype\(') p
(int32) str
('\) ) p 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S
(# fix du) c n
(e to tensorflow complaining) N
() p n
(#import pdb; pdb.set_trace\(\) # debug mode) c n
(''') p
(def cutData\(f, cut\):) str n
() S 8 T (l,w,h = f.shape) N
() S 8 T (s,e = cut,w-cut #assumes square) N
() S 8 T (fo = f[:,s:e,s:e]) N
() S 8 T (print \(fo.shape\)) N
() S 8 T (return fo) N
(''') p n
(def) K
( cutData\(f, cutx,cuty\):) p n
() S 8 T (l,w,h = f.shape) N
() S 8 T (sx,ex = cutx,w-cutx ) S
(#assumes square) c n
() p 8 T (sy,ey = cuty,w-cuty ) S
(#assumes square) c n
() p 8 T (fo = f[:,sy:ey,sx:ex]) N
() S 8 T () S
(print) K
( \(fo.shape\)) p n
() S 8 T () S
(return) K
( fo) p n
() N
() N
(def) K
( genTrainAndVal\(f,l\): ) p
(#split the features and labels of the training data 80:) c n
(20 train and validation) N
() p 8 T (valPercent=20) S 24 T () N
() S 8 T (lx,_,_=f.shape) N
() N
() S 8 T (z = f.shape[0]) S 24 T () S 32 T () S
(# 60000 hopefully) c n
() p 8 T (s = np.arange\(z\)) N
() S 8 T (np.random.shuffle\(s\)) N
() S 8 T (fs = f[s]) S 24 T () S 32 T () S 40 T () S
(# features shuffled) c n
() p 8 T (ls = l[s]) S 24 T () S 32 T () S 40 T () S
(# labels shuffled ) c n
() p 8 T (lx = f.shape[0] ) S 32 T () S
(# len of the features) c n
() p 8 T (nv = int\( lx *.2\) ) S 32 T () S
(# num validation samp ) c n
() p 8 T () S
(print) K
( \(fs[nv:].shape, ls[nv:].shape, fs[:nv].shape, ls[:nv].shape\)) p n
() S 8 T () S
(return) K
( fs[nv:], ls[nv:], fs[:nv], ls[:nv]) p n
() N
(#send this the output of only the first 2 returned val of genTrainAndVal ) c n
(def) K
( getBatch\(feat,lab\):) p n
() S 8 T (l,_,_= feat.shape) N
() S 8 T (choices = np.random.choice\(l, size=BATCH_SIZE\)) N
() S 8 T () S
(return) K
( feat[choices],lab[choices]) p n
() N
(def) K
( cnn\(features,labels,mode\):) p 32 T () N
() S 8 T () S
(#layer 0) c n
() p 8 T () N
() S 8 T (h,w = 20,20) N
() S 8 T (L0 = tf.reshape\(features[") S
(x) str
("], [-1, h,w, 1]\) ) p
(#the -1 makes it guess how ) c n
(big its supposed to be) N
(mnist.py) (Page 1/3) (Sep 26, 18 21:59) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(#[numExaples,height,width,channe) c n
(ls]) N
() p 8 T () S
(# hyperParams) c n
() p 8 T (k = 4) N
() S 8 T (n = 5) N
() S 8 T (l = 0.002) N
() S 8 T (fil = 1 ) N
() S 8 T (dr  = .1) N
() S 8 T () S
(# conv layer 1) c n
() p 8 T (conv1 = tf.layers.conv2d\(inputs=L0,filters=fil,kernel_size=[k, k], paddi) N
(ng=") S
(same) str
(", activation=tf.nn.elu\)) p n
() S 8 T () S
(# pool layer 1) c n
() p 8 T (pool1 = tf.layers.max_pooling2d\(inputs=conv1, pool_size=[n, n], strides=) N
(n\)) N
() S 8 T () S
(# flatten the layer for fully connected layer) c n
() p 8 T (poolInt = int\(w/n*h/n\) * fil) N
() S 8 T (pFlat = tf.reshape\(pool1, [-1, poolInt]\)) N
() S 8 T () S
(# fully connected layer) c n
() p 8 T () S
(#dense = tf.layers.dense\(inputs=pFlat, units=32, activation=tf.nn.elu\)) c n
() p 8 T () S
(# dropout layer ) c n
() p 8 T (dropout = tf.layers.dropout\(inputs=pFlat, rate=dr, training=mode == tf.e) N
(stimator.ModeKeys.TRAIN\)) N
() S 8 T () S
(# logits layer layer that has the 10 outputs ) c n
() p 8 T (logits = tf.layers.dense\(inputs=dropout, units=10\)) N
() N
() S 8 T (predictions = {) N
() S 8 T () S 16 T (") S
(classes) str
(": tf.argmax\(input=logits, axis=1\),) p n
() S 8 T () S 16 T (") S
(probabilities) str
(": tf.nn.softmax\(logits, name=") p
(softmax_tensor) str
("\)}) p n
() N
() S 8 T () S
(if) K
( mode == tf.estimator.ModeKeys.PREDICT:) p n
() S 8 T () S 16 T () S
(return) K
( tf.estimator.EstimatorSpec\(mode=mode, predictions=predict) p n
(ions\)) N
() N
() S 8 T (num_params = np.sum\([np.prod\(v.get_shape\(\).as_list\(\)\) ) S
(for) K
( v ) p
(in) K
( tf.traina) p n
(ble_variables\(\)]\)) N
() S 8 T () S
(print) K
(\(") p
(Num Params) str
(",num_params\)) p n
() S 8 T () N
() S 8 T () S
(for) K
( v ) p
(in) K
( tf.trainable_variables\(\):) p n
() S 8 T () S 16 T () S
(print) K
(\(v.get_shape\(\)\)) p n
() N
() S 8 T (loss = tf.losses.sparse_softmax_cross_entropy\(labels=labels, logits=logi) N
(ts\) + l*tf.reduce_sum\([tf.nn.l2_loss\(tV\) ) S
(for) K
( tV ) p
(in) K
( tf.trainable_variables\(\)]\)) p n
() N
() S 8 T () S
(if) K
( mode == tf.estimator.ModeKeys.TRAIN:) p n
() S 8 T () S 16 T (optimizer = tf.train.AdamOptimizer\(learning_rate=0.001\)) N
() S 8 T () S 16 T (train_op = optimizer.minimize\(loss=loss,global_step=tf.train.get) N
(_global_step\(\)\)) N
() S 8 T () S 16 T () S
(return) K
( tf.estimator.EstimatorSpec\(mode=mode, loss=loss, train_op) p n
(=train_op\)) N
() N
() S 8 T (eval_metric_ops = {) S 32 T (") S
(accuracy) str
(": tf.metrics.accuracy\(labels=labels, pre) p n
(dictions=predictions[") S
(classes) str
("]\)}) p n
() S 8 T () S
(return) K
( tf.estimator.EstimatorSpec\(mode=mode, loss=loss, eval_metric_ops=) p n
(eval_metric_ops\)) N
() N
() N
(def) K
( main\(\):) p n
() S 8 T (mnist_classifier = tf.estimator.Estimator\(model_fn=cnn\)) S
(#,model_dir="./tm) c n
(p/modelCheckpoint") N
() p 8 T () S
(#tensors_to_log = {"probabilities": "softmax_tensor"}) c n
() p 8 T () S
(#logging_hook = tf.train.LoggingTensorHook\(tensors=tensors_to_log, every) c n
(_n_iter=50\)) N
() p 8 T (tf.logging.set_verbosity\(tf.logging.INFO\)) N
() N
() S 8 T (train_input_fn = tf.estimator.inputs.numpy_input_fn\(x={") S
(x) str
(": tx},y=ty,bat) p n
(ch_size=100,) N
() S 8 T () S 16 T (num_epochs=None,shuffle=True\)) N
() N
() S 8 T (mnist_classifier.train\(input_fn=train_input_fn,steps=2000\)) S
(#,hooks=[loggi) c n
(mnist.py) (Page 2/3) (Sep 26, 18 21:59) title
border
grestore
(Printed by ostap) rhead
(mnist.py) (1/2) (Wednesday September 26, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(ng_hook]\)) c n
() p n
() S 8 T (eval_input_fn = tf.estimator.inputs.numpy_input_fn\(x={") S
(x) str
(": vx},y=vy,) p n
() S 8 T () S 16 T (num_epochs=1,shuffle=False\)) N
() N
() S 8 T (eval_results = mnist_classifier.evaluate\(input_fn=eval_input_fn\)) N
() S 8 T () S
(print) K
(\(eval_results\)) p n
() N
() S 8 T () S
(#I did not have this here when I was tuning hyper Parameters) c n
() p 8 T (eval_input_fn = tf.estimator.inputs.numpy_input_fn\(x={") S
(x) str
(": x_test},y=y_t) p n
(est,) N
() S 8 T () S 16 T (num_epochs=1,shuffle=False\)) N
() N
() S 8 T (eval_results = mnist_classifier.evaluate\(input_fn=eval_input_fn\)) N
() S 8 T () S
(print) K
(\(eval_results\)) p n
() N
() N
() S 8 T () N
() N
(cutx = 4) N
(cuty = 4) N
(tx,ty,vx,vy = genTrainAndVal\(x_train,y_train\)) N
(tx=cutData\(tx,cutx,cuty\)) N
(vx=cutData\(vx,cutx,cuty\)) N
(x_test = cutData\(x_test,cutx,cuty\)) N
(print) K
(\(tx.shape,') p
(hi) str
('\)) p n
(main\(\)) N
() N
(#end of code) c n
() p n
(# just for shits ) c n
(def) K
( plotVal\(\):) p n
() S 8 T (len,_,_ = x_train.shape) N
() N
() S 8 T (rn = np.random.randint\(0,len-1\)) N
() S 8 T () S
(#rn = 26563) c n
() p 8 T () S
(print) K
(\(len,rn\)) p n
() S 8 T (test_val=x_train[rn]) N
() N
() S 8 T (fig1= plt.figure\(1\)) N
() S 8 T (dr=4 ) S
(#pixels top bottom left and right to drop) c n
() p 8 T (xc,yc = np.linspace\(0+dr,27-dr,28-2*dr\),np.linspace\(27-dr,0+dr,28-2*dr\) ) N
() S 8 T (xv,yv = np.meshgrid\(xc,yc\)) N
() N
() S 8 T () S
(print) K
(\(type\(y_train\)\)) p n
() S 8 T () N
() S 8 T () S
(#reduce dimentions of the test data) c n
() p 8 T (f,l = 0+dr, 28-dr) N
() S 8 T (z = test_val[f:l,f:l]) N
() N
() S 8 T (CS = plt.contourf\(xv,yv,z,cmap=') S
(gray) str
('\)) p n
() S 8 T (w= plt.xlabel\(') S
(w) str
('\)) p n
() S 8 T (h= plt.ylabel\(') S
(h) str
('\)) p n
() S 8 T (h.set_rotation\(0\)) N
() S 8 T (plt.title\(") S
(MNIST) str
("\)) p n
() S 8 T (plt.axis\(') S
(equal) str
('\) ) p n
() S 8 T () S
(#plt.clabel\(CS, fontsize=9, inline=1\)) c n
() p 8 T (plt.show\(\)) S
(mnist.py) (Page 3/3) (Sep 26, 18 21:59) title
border
grestore
(Printed by ostap) rhead
(mnist.py) (2/2) (Wednesday September 26, 2018) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
