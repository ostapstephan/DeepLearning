%!PS-Adobe-3.0
%%Title: spiral.py
%%For: ostap
%%Creator: a2ps version 4.14
%%CreationDate: Wed Sep 19 19:53:00 2018
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#!/bin/python3.6) c n
(#Ostap Voynarovskiy) N
(#CGML HW1) N
(#Sept 17 2018) N
() p n
() N
(import) K
( numpy as np) p n
(import) K
( tensorflow as tf) p n
(import) K
( matplotlib.pyplot as plt) p n
(import) K
( matplotlib.mlab as mlab) p n
(from) K
( tqdm ) p
(import) K
( tqdm) p n
(#from tensorflow.python import debug as tfdbg) c n
() p n
(BATCH_SIZE = 200) N
(NUM_ITER = 5000) S
(# iterations of training ) c n
() p n
(class) K
( Data\(object\):) p n
() S 8 T () S
(def) K
( __init__\(self\):) p n
() S 8 T () S 16 T () S
(#create spirals) c n
() p 8 T () S 16 T (nPoints = 200 ) N
() S 8 T () S 16 T (self.index = np.arange\(nPoints\)) N
() S 8 T () S 16 T (self.nPoints = nPoints) N
() S 8 T () S 16 T (self.featx, self.featy,self.lab  = self.gen_spiral\(nPoints\)) N
() N
() S 8 T () S
(def) K
( gen_spiral\(self,nPoints\):) p n
() S 8 T () S 16 T () N
() S 8 T () S 16 T (scale = 1) N
() S 8 T () S 16 T (offset = 1) N
() S 8 T () S 16 T (sigma = .2) N
() N
() S 8 T () S 16 T (t = np.linspace\(0,3.5*np.pi,num = nPoints\)) N
() S 8 T () S 16 T (noise0 = sigma*np.random.normal\(size=nPoints\)) N
() S 8 T () S 16 T (noise1 = sigma*np.random.normal\(size=nPoints\)) N
() S 8 T () S 16 T (noise2 = sigma*np.random.normal\(size=nPoints\)) N
() S 8 T () S 16 T (noise3 = sigma*np.random.normal\(size=nPoints\)) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(#add normal noise) c n
() p 8 T () S 16 T (theta0 = -t*scale + noise0) N
() S 8 T () S 16 T (r0 = \(t + offset\) + noise1) N
() S 8 T () S 16 T (theta1= -t*scale + np.pi + noise2) S 56 T () S
(#the addition of pi does) c n
( a 180 degree shift) N
() p 8 T () S 16 T (r1 = \(t + offset\) + noise3) N
() N
() S 8 T () S 16 T () S
(#convert from polar to cartesian) c n
() p 8 T () S 16 T (self.x0 = np.cos\(theta0\)*\(r0\)) N
() S 8 T () S 16 T (self.y0 = np.sin\(theta0\)*\(r0\)) N
() S 8 T () S 16 T (cat0 = [0]*nPoints ) S 40 T () S 48 T () S 56 T () S
(# the categories) c n
() p 8 T () S 16 T (self.x1 = np.cos\(theta1\)*\(r1\) ) N
() S 8 T () S 16 T (self.y1 = np.sin\(theta1\)*\(r1\)) N
() S 8 T () S 16 T (cat1 = [1]*nPoints ) S 40 T () S 48 T () S 56 T () S
(# the categories) c n
() p 8 T () S 16 T () S
(return) K
( np.concatenate\(\(self.x0,self.x1\)\),np.concatenate\(\(self.y0) p n
(,self.y1\)\), np.concatenate\(\(cat0,cat1\)\) ) S 48 T () S 56 T () N
() N
() S 8 T () S
(def) K
( get_batch\(self\):) p n
() S 8 T () S 16 T (choices = np.random.choice\(self.nPoints*2, size=BATCH_SIZE\)) N
() S 8 T () S 16 T () S
(return) K
( list\(zip\(self.featx[choices],self.featy[choices]\)\), self.) p n
(lab[choices]) N
() N
() N
(def) K
( f\(x\): ) p
(#this is where we decide our tunable parameters and create our percept) c n
(ron ) N
() p 8 T (m1 = 74) S 16 T () S
(# first layer nodes = my fav 2 numbers ) c n
() p 8 T (m2 = 47) S 16 T () S
(# second layer nodes = my fav 2 numbers but swapped) c n
() p 8 T (m3 = 1 ) S 16 T () S
(# one so that its a single yes or no) c n
() p n
() S 8 T () S
(# These are the initializations of the things we will learn including w') c n
(s b's and ) N
() p n
() S 8 T () S
(# Weight matricies should all be aproximately gaussian distribution sinc) c n
(spiral.py) (Page 1/3) (Sep 19, 18 19:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(e we care about ) c n
() p 8 T () S
(# diversity but wanna give all features similar chances on average. ) c n
() p 8 T (w1 = tf.get_variable\(') S
(w1) str
(', [2,m1], tf.float32,tf.random_normal_initiali) p n
(zer\(\)\) ) N
() S 8 T (w2 = tf.get_variable\(') S
(w2) str
(', [m1, m2], tf.float32,tf.random_normal_initia) p n
(lizer\(\)\) ) N
() S 8 T (w3 = tf.get_variable\(') S
(w3) str
(', [m2, m3], tf.float32,tf.random_normal_initia) p n
(lizer\(\)\) ) N
() N
() S 8 T () S
(# start at 0) c n
() p 8 T (b1 = tf.get_variable\(') S
(b1) str
(', [1,m1], tf.float32, tf.random_normal_initiali) p n
(zer\(\)\)  ) S
(#update) c n
() p 8 T (b2 = tf.get_variable\(') S
(b2) str
(', [1,m2], tf.float32, tf.random_normal_initiali) p n
(zer\(\)\) ) N
() S 8 T (b3 = tf.get_variable\(') S
(b3) str
(', [1,m3], tf.float32, tf.random_normal_initiali) p n
(zer\(\)\) ) N
() N
() S 8 T () S
(#activation functions) c n
() p 8 T (layer1 = tf.nn.elu\(tf.matmul\(x,w1\)+b1\)) S 48 T () S
(# Activation function 1) c n
() p 8 T (layer2 = tf.nn.leaky_relu\(tf.matmul\(layer1,w2\)+b2\)) S 64 T () S 72 T () S
(# Activa) c n
(tion function 2) N
() p 8 T (layer3 = \(tf.matmul\(layer2,w3\)+b3\)) S 48 T () S 56 T () S 64 T () S 72 T () S
(# produc) c n
(e logits for cross entropy loss) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S 80 T () N
() S 0 T () S 8 T () S 16 T () S
(# to give a clear "is this group 0 or 1" ) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S 80 T () N
() S 0 T () S 8 T () S 16 T () S
(# so dont put it through a sigmoid now) c n
() p 8 T (''') S
(The decision to use a leaky relu and an elu was carefully considered. When I first ) str n
() S 8 T (selected an activation function, I was not picky and used only sigmoids since they are classic. ) N
() S 8 T (When I got everything working, I realized that it took many iteratios to converge. I proceeded) N
() S 8 T (to test then the hyperbolic tangent, the relu, elu, and leak relu along with different combinations) N
() S 8 T (of them. I found that the best results with the least training iterations happened with the) N
() S 8 T (leaky relu and the elu function.) S
(''') p n
() N
() S 8 T () S
(# This will be left out. We are performing binary classification.) c n
() p 8 T () S
(# We will not be modeling something in multiple dim.) c n
() p 8 T () S
(# mu is the x loc of the gaussian so we use a uniform distribution) c n
() p 8 T () S
(#mu =    tf.get_variable\('mu', [NUM_PHIS, 1], tf.float32, tf.random_unif) c n
(orm_initializer\(\)\) ) N
() p 8 T () S
(# the sigmas are gonna be approx ) c n
() p 8 T () S
(#sig =   tf.get_variable\('sig', [NUM_PHIS, 1], tf.float32,tf.random_norm) c n
(al_initializer\(\)\)) N
() p 8 T () S
(# phi = tf.exp\(-tf.pow\(\(x-mu\)/sig, 2\)\)) c n
() p 8 T () S
(return) K
( layer3 ) p 24 T () S
(# tf.squeeze\(layer3\)  This is cux the losses.sigmoid_cro) c n
(ss_entropy wants ) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(#[batch size, num_classes] im guessing n) c n
(um classes is 1) N
() p n
(features  = tf.placeholder\(tf.float32, [None,2]\) ) S 56 T () S
(# Should get batch size ) c n
(by 2 array of labels) N
(labels = tf.placeholder\(tf.float32, [None]\) ) p 48 T () S 56 T () S
(# Should get batch size ) c n
(by 1 array ...) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T () S 80 T () N
() S 0 T () S 8 T () S 16 T () S 24 T () S
(# we want a binary classification) c n
(labels_predicted = f\(features\)) p n
() N
(# which w are we taking the norm of there are 3?) c n
(l = 0.002; ) p
(# l is lambda ) c n
() p n
(loss = tf.losses.sigmoid_cross_entropy\(tf.stack\([labels, 1-labels], 1\),tf.squeez) N
(e\(tf.stack\([labels_predicted, -labels_predicted], 1\)\)\) \\) N
() S 8 T (   + l*tf.reduce_sum\([tf.nn.l2_loss\(tV\) ) S
(for) K
( tV ) p
(in) K
( tf.trainable_variables) p n
(\(\)]\)) N
(#loss  = tf.reduce_mean\(tf.pow\(y-y_hat, 2\)/2\) #loss funtion = cross entropy + L2) c n
( norm) N
(optim = tf.train.GradientDescentOptimizer\(learning_rate=.1\).minimize\(loss\) ) p
(#this) c n
( does gradient descent) N
(#optim??? = tf.train.momentum #cuz we read about it in the reading) N
(init  = tf.global_variables_initializer\(\)) p n
(spiral.py) (Page 2/3) (Sep 19, 18 19:46) title
border
grestore
(Printed by ostap) rhead
(spiral.py) (1/2) (Wednesday September 19, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(sess = tf.Session\(\)) N
(#sess = tfdbg.LocalCLIDebugWrapperSession\(sess\)) c n
(sess.run\(init\)) p n
() N
(data = Data\(\)) N
(for) K
( _ ) p
(in) K
( tqdm\(range\(0, NUM_ITER\)\):) p n
(    x_np, labels_np = data.get_batch\(\)) N
(    loss_np, yhats, _ = sess.run\([loss, labels_predicted, optim], feed_dict={fea) N
(tures: x_np, labels: labels_np}\)) N
(    ) S
(#print\(loss_np\)) c n
() p n
(#rslt=sess.run\(tf.stack\(labels_predicted\), feed_dict={features: list\(zip\(data.fe) c n
(atx,data.featy\)\)}\)) N
(fig1= plt.figure\(1\)) p n
() N
(xc,yc = np.linspace\(-15,15,500\),np.linspace\(-15,15,500\) ) N
(xv,yv = np.meshgrid\(xc,yc\)) N
() N
(feat = np.array\(list\(zip\(xv.flatten\(\),yv.flatten\(\)\)\)\)) N
(res  = sess.run\(labels_predicted, feed_dict={features: feat }\)  ) S
(# lt = sess.run\() c n
(what_you_want,    feed_dict={features: what_you_have}\)) N
(cont = sess.run\(tf.sigmoid\(res\)\)) p n
(plt.contourf\(xv,yv,cont.reshape\(\(500,500\)\),[0,.5,1]\)) N
(plt.scatter\(data.x0,data.y0\)) N
(plt.scatter\(data.x1,data.y1\)) N
() N
(plt.xlabel\(') S
(x) str
('\)) p n
(plt.ylabel\(') S
(y) str
('\)) p n
(plt.title\(") S
(3 Layer Perceptron ) str
("\)) p n
(plt.axis\(') S
(equal) str
('\) ) p
(#make it so that it isnt warped) c n
(plt.show\(\)) p
(spiral.py) (Page 3/3) (Sep 19, 18 19:46) title
border
grestore
(Printed by ostap) rhead
(spiral.py) (2/2) (Wednesday September 19, 2018) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
